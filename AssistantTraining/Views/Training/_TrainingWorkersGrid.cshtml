@using GridMvc.Html
@using GridMvc.Sorting
@model Grid.Mvc.Ajax.GridExtensions.AjaxGrid<AssistantTraining.ViewModel.TrainingWorkersGridData>

@{ 

    string TrainingNumber = String.Empty;
    if (Model.DisplayingItemsCount > 0)
    {
        TrainingNumber = Model.GridItems.First().TrainingNumber;
    }
}
<div class="row top10"></div>
<a href="@Url.Action("Excel", "Training")" class="btn btn-default">
    Export
    <span class="glyphicon" aria-hidden="true"></span>
</a>
<button type="button" onclick="selectAll()" class="btn btn-default">Select All</button>
<button type="button" onclick="unselectAll()" class="btn btn-default">Unselect All</button>
@(
    Html.Grid(Model).Named("TrainingWorkersGrid")
        .Columns(columns =>
        {
            columns.Add()
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(f => index(f));

            columns.Add(f => f.WorkerID, true);
            columns.Add(f => f.TrainingNameId, true);
            columns.Add(f => f.WorkerFullName).Titled("Nazwisko").Sortable(true).Filterable(true).SetWidth(110);
            //columns.Add(f => f.WorkerLastName).Titled("Nazwisko").Sortable(true).Filterable(true).SetWidth(110);
            //columns.Add(f => f.WorkerFirstMidName).Titled("Imię").Sortable(true).Filterable(true).SetWidth(110);
            columns.Add()
                .Encoded(false)
                .Titled("")
                .Sanitized(false)
                .SetWidth(30)
                .RenderValueAs(o => Html.CheckBox("checked", (o.DateOfTraining == null ? false : true), new { @class = "check-item", ID = "trained" }));
            columns.Add()
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(f => Edit(f.TrainingNameId,f.WorkerID));
        })
        .Sortable()
        .WithPaging(10))
<div class="row top10">

</div>
<div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-2"></div>
    <div class="col-md-2">
        @if (User.IsInRole("Administrator"))
        {
            <input type="button" class="btn btn-info col-md-10" value="Remove Training" id="RemoveTrainingToWorkerWorkersGrid" />
        }
    </div>
    <form id="myform">
        <div class="col-md-2">
            <span>
                <input type="text" placeholder="Training number" disabled id="TrainingNumber" name="field1" class="form-control hidden" value="@TrainingNumber" required>
            </span>
        </div>
        <div class="col-md-2">
            <span id="sandbox-container">
                <input type="text" placeholder="Date" id="TrainingDate" name="field2" class="form-control" required>
            </span>
        </div>
    </form>
        <div class="col-md-2">
            <input type="button" class="btn btn-info col-md-10" value="Complet Training" id="SaveTrainingWorkersGrid" />
        </div>

</div>

<script>
function selectAll() {
    $(':checkbox').prop('checked', true);
}
    

function unselectAll() {
    $(':checkbox').prop('checked', false);
}
</script>

@helper Edit(int TrainingNameId, int WorkerId)
{

    if (User.IsInRole("Administrator"))
    {
         @Html.ActionLink("Delete", "DeleteWorkerTraining", new { TrainingNameID = TrainingNameId, WorkerID = WorkerId })
    }
}

@helper index(AssistantTraining.ViewModel.TrainingWorkersGridData item)
{

object column;
object dir;
int index = 0;


    index = Model.GridItems.ToList().FindIndex(x => x.WorkerID == item.WorkerID) + 1;


    @Html.Label(index.ToString())
}


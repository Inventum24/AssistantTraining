@model IEnumerable<AssistantTraining.ViewModel.InstructionIndexData>
@using GridMvc.Html
@{
    ViewBag.Title = "Instructions";
}

<h2>Instructions</h2>

<p>
    @if (User.IsInRole("Administrator") || User.IsInRole("Engineer") || User.IsInRole("Operator"))
    {
        <div class="row">
            <div class="col-md-4">
                <a href="@Url.Action("Create", "Instructions")" class="btn btn-default">
                    Create
                    <span class="glyphicon" aria-hidden="true"></span>
                </a>
            </div>
            <div class="col-md-4">
            </div>
            <div class="col-md-4">

                <form class="navbar-form" role="search" id="idInstructions" method="POST" action="/Instructions/Search">
                    <div class="input-group">
                        <input type="text" class="typeahead form-control" autocomplete="off" placeholder="Instructions" spellcheck="false" name="srchterminstructions" id="srchterminstructions">
                        <div class="input-group-btn">
                            <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    }
</p>

@Html.Grid(Model).Columns(columns =>
{
    columns.Add(foo => foo.RowNo).Titled("Lp.").Sortable(true).Filterable(true).SetWidth(10);
    columns.Add(foo => foo.Name).Titled("Nazwa").Sortable(true).Filterable(true).SetWidth(110);
    columns.Add(foo => foo.Number).Titled("Numer").Sortable(true).Filterable(true).SetWidth(50);
    columns.Add(foo => foo.Version).Titled("Wersja").Sortable(true).Filterable(true).SetWidth(30);
    columns.Add(foo => foo.UserName).Titled("Użytkownik").Sortable(true).Filterable(true).SetWidth(50);
    columns.Add(foo => foo.TimeOfCreation).Titled("Data").Sortable(true).Filterable(true).SetWidth(50);
    columns.Add()
            .Titled("Grupy")
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(110)
            .RenderValueAs(foo => Groups(foo));
    /* Adding not mapped column, that renders body, using inline Razor html helper */
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(foo => Edit(foo.ID));

}).WithPaging(50)

@helper Edit(int Id)
{
    @Html.ActionLink("Details", "Details", new { id = Id })

if (User.IsInRole("Administrator") || User.IsInRole("Engineer"))
{
        @:| @Html.ActionLink("Edit", "Edit", new { id = Id })
            }
if (User.IsInRole("Administrator"))
{
        @:| @Html.ActionLink("Delete", "Delete", new { id = Id })
            }
}

@helper Groups(AssistantTraining.ViewModel.InstructionIndexData item)
{
    @String.Join(" ", item.Items.Where(x => item.SelectedIds.Contains(x.Value)).Select(x => x.Text).ToArray())
}



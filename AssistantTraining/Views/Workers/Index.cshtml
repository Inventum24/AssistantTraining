@model IEnumerable<AssistantTraining.ViewModel.WorkerGroupViewModel>
@using GridMvc.Html

@{
    ViewBag.Title = "Index";
}

<h2>Workers</h2>
<p>
    @*@Html.ActionLink("Create New", "Create", new { @class = "btn btn-default" })*@
    @*@Html.ActionLink("Export to Excel", "Excel", new {@class = "btn btn-default" })*@
    @if (User.IsInRole("Administrator"))
    {
    <a href="@Url.Action("Create", "Workers")" class="btn btn-default">
        Create New
        <span class="glyphicon" aria-hidden="true"></span>
    </a>
    }
    <a href="@Url.Action("Excel", "Workers")" class="btn btn-default">
        Export to Excel
        <span class="glyphicon" aria-hidden="true"></span>
    </a>
</p>


@Html.Grid(Model).Columns(columns =>
{
    columns.Add(foo => foo.FullName).Titled("Nazwisko").Sortable(true).Filterable(true).SetWidth(110);
    //columns.Add(foo => foo.FirstMidName).Titled("Imię").Sortable(true).Filterable(true).SetWidth(110);
    /* Adding not mapped column, that renders body, using inline Razor html helper */
    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(foo => Groups(foo));

    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(foo => Edit(foo.ID));

}).WithPaging(10)

@helper Edit(int Id)
{
    @Html.ActionLink("Details", "Details", new { id = Id })

if (User.IsInRole("Administrator"))
{
        @:| @Html.ActionLink("Edit", "Edit", new { id = Id })
    }
    if (User.IsInRole("Administrator"))
    {
        @:| @Html.ActionLink("Delete", "Delete", new { id = Id })
    }
}

@helper Groups(AssistantTraining.ViewModel.WorkerGroupViewModel item)
{
   @String.Join(" ", item.Items.Where(x => item.SelectedIds.Contains(x.Value)).Select(x => x.Text).ToArray())
}
